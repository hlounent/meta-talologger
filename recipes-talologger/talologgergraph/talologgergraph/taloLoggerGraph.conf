#
###########################################################################
# 
# File:            taloLoggerGraph.conf
#
# License:         Donationware, see attached LICENSE file for more 
#                  information
#
# Author:          Olli Lammi (olammi@iki.fi)
#
# Version:         1.2b
#
# Date:            09.01.2015
#                   
# Description:     Configuration file for taloLoggerGraph
#
###########################################################################


############################################################################# 
# Data store configuration
############################################################################# 

# Database type (Supported types: MYSQL and SQLITE)
DB_TYPE = SQLITE

# Use native taloLogger database schema of given version. If key is available
# DB_TABLE and DB_TIMECOL -parameters will be ignored. Version 0 or key
# not available uses user the configurable table model.
# Available versions: 
#     1  -  since taloLoggerGraph v1.1a and taloLogger v1.5a
DB_TALOLOGGER_SCHEMA_VERSION = 1

# Data table name
#DB_TABLE = talolog

# Name for column to store timestamp for the measured data
#DB_TIMECOL = time


############################################################################# 
# MySQL data store configuration
############################################################################# 

# Host name for MySql database
MYSQLDB_HOST = localhost 

# Database user name
MYSQLDB_USER = talo 

# Database password
MYSQLDB_PASSWD = xxpassxx

# Database name
MYSQLDB_NAME = talo


############################################################################# 
# SQLite data store configuration
############################################################################# 

# File name for SQLite database
SQLITEDB_NAME = /srv/taloLogger/db/data.sqlite


############################################################################# 
# Calendar configuration
############################################################################# 

# Whether to hide the calendar (true/false)
HIDE_CALENDAR = false


############################################################################# 
# Cache configuration
############################################################################# 

# Whether to cache images (true/false)
CACHE_IMAGES = false

# Cache location on file system
CACHE_DIRECTORY = /home/talo/public_html/tlgcache

# Cache location on web URL 
CACHE_URL_PATH = tlgcache/


############################################################################# 
# Graphing configuration
############################################################################# 

# How to draw the result graphs 
#    false - default, draw images server side (JpGraph)
#    true  - use javascript (d3js) in browser to visualize the graphs 
JAVASCRIPT_CHARTS = true


############################################################################# 
# Chart1 configuration
############################################################################# 

# Start a new chart
*CHART*

# Chart title, appears in the chart image (may be left empty)
TITLE = Temperatures

# Chart Y-axis configuration for axis 1 and optionally for axis 2
#
# Syntax:  AXIS_n=min:max:major_tick:minor_tick:title
#
#          n           - Y-axis number (1 to N)
#
#          min         - minimum value visible in axis scale
#                        (auto for automatic scaling)
#
#          max         - maximum value visible in axis scale
#                        (auto for automatic scaling)
#
#          major_tick  - interval for major tickmarks in axis,
#                        the axis labels will be printed next to the
#                        major tick marks
#                        (auto for automatic scaling)
#
#          minor_tick  - interval for minor tickmarks in axis,
#                        use same value as for major_tick to hide
#                        minor tick marks
#                        (auto for automatic scaling)
#
#          title       - axis title (eg. unit)
#
# Example: AXIS_1 = -30.0:30.0:10.0:5.0:C
# Example: AXIS_2 = auto:auto:10:5:C
#
AXIS_1 = -30:30:10:5:C
#AXIS_2 = 10:70:10:5:C


# Chart image size configuration, in pixels (optional)
# (NOTE: The actual y-size of the result image depends also
#        on the chart legend height. The legend is added 
#        to the result image height.)
#
# Syntax: SIZE=xsize:ysize
#
SIZE = 800:694


# Chart legend configuration
#          
# Syntax:  LEGEND=cols:values
#          
#          cols        - Number of columns in the chart legend.
#                        (0 for no legend)
#
#          value       - Configures whether the legend will contain
#                        numerical data (last value or average).
#                        Possible values are:
#                          0 - no data 
#         
#                          1 - for today's chart the recent data value  
#                              and for history charts the average data value
#
#                          2 - for today's chart both recent and average
#                              data values and for history charts the average
#                              data value
# 
#                          3 - average data values for all charts
#
# Example: LEGEND = 3:1    
#
LEGEND = 3:2


# Chart data series configuration
#
# Syntax:  @SERIES=type:db_column:legend:color:<type specific data>
#
#          type        - type of the series. Possible values are:
#                          NORMAL    - Series will be drawn as a
#                                      coloured line indicating the
#                                      series value at each time. 
#                          STATE     - Series will be drawn as
#                                      a coloured bar on top of the
#                                      X-axis indicating the times
#                                      the state was active.
#                          COUNTER   - Series will be drawn as a 
#                                      coloured line indicating
#                                      the amount a counter value
#                                      has increased in average in one
#                                      second between the last value
#                                      and new value.
#
#          db_column   - name of the database table column to evaluate
#                        with this series
#
#          legend      - title text that will appear in the legend
#                        box
#
#          color       - color that will be used to draw this data series,
#                        color value may be a RGB value given in the
#                        hexadecimal format (example: #E0E0E0) or as 
#                        a JpGraph predefined color name
#                        (http://jpgraph.net/download/manuals/chunkhtml/apd.html)
#
#          <type specific data> - additional parameters depending on the
#                        series type:
#
#                        For NORMAL type:
#
#                          Syntax:   axis:factor
#
#                          axis    - number of Y-axis for this series 
#
#                          factor  - the values in the database column will
#                                    be multiplied with this factor before
#                                    drawing
#
#                        For COUNTER type:
#
#                          Syntax:   axis:factor:cnttype[:maxvalue]
#
#                          axis    - number of Y-axis for this series 
#
#                          factor  - the values in the database column will
#                                    be multiplied with this factor before
#                                    drawing
#
#                          cnttype - type of the counter value
#                                      0 - when the counter value has not changed
#                                          since last value, the value drawn is
#                                          zero
#                                      1 - when the counter value has not changed
#                                          since last value, consider this measurement
#                                          non existing. The next change in the counter
#                                          will result as average line over the period
#                                          the value stayed unchanged                                          
#                                      2 - cumulative counter type. Outputs a daily 
#                                          cumulative counter graph.                                          
#
#                          maxvalue - Maximum value for counter (optional)
#
#                        For STATE type:
#                          Syntax:   statement
#                          
#                          statement - this statement will be evaluated
#                                    for the database value (marked as 
#                                    %VALUE% in the statement). If the 
#                                    statement is true for a value at a time
#                                    the state bar will be drawn for that 
#                                    time in the chart.
#
# Examples:
#
#     @SERIES = NORMAL:outdoor:Outdoor temp:orange:2:0.01
#
#         A data series will be read from database column outdoor,
#         divided by 100 (same as multiplied by 0.01) and drawn
#         in orange color against the axis number 2 in the chart.
#         The legend text for the data series is "Outdoor temp".
#
#     @SERIES = STATE:statevalue:Compressor:yellowgreen:(%VALUE% & 16) != 0
#
#         A state bar will be drawn in yellowish green indicating
#         whether the database column walue "statevalue" has bit 4 set
#         (and with value 16 results to a non zero value). The legend
#         text for the state bar is "Compressor".
#
#     @SERIES = STATE:water_top:Hot water:red:%VALUE% > 45.0
#     
#         A state bar will be drawn in red indicating
#         whether the database column walue "water_top" is higher
#         than 45.0. The legend text for the state bar is "Hot water".
#         
#     @SERIES = COUNTER:kwh_counter:El. power:blue:1:3.6:0
#
#         A counter data series will be read from database column
#         "kwh_counter". The counter difference with the last received value
#         is calculated and averaged over the time span to indicate how much
#         the counter in average has increased during each second in the
#         interval. Then the average per second increase will be multiplied
#         by the factor 3.6 (the factor parameter). The series will be 
#         drawn against the axis number 1. The legend text for the 
#         data series is "El. power".
#
@SERIES = NORMAL:dummy:outdoor:orange:1:1.0
@SERIES = STATE:dummy:freezing:blue:%VALUE% < 0.0


############################################################################# 
# Image1 configuration
############################################################################# 

*IMAGE*

# Background image (must be in png format).
BACKGROUND = docs/ghp_process.png


# Title for the image (can be commented out for no title)
#         
# Syntax:   TITLE = xpos:ypos:color:title
#         
TITLE = 235:295:black:GHP process


# Image data position configuration
#
# Syntax:  @POSITION=type:db_column:xpos:ypos:subtype:<type specific data>
#
#          type        - type of the series. Possible values are:
#                          NORMAL    - Database column contains
#                                      the direct data. Values are
#                                      multiplied by the factor given. 
#                          STATE     - State will be calculated 
#                                      using the statement given.
#                                      A coloured circle will be drawn
#                                      as a indication of active status
#                          COUNTER   - Database column contains counter
#                                      data. The result value is determined by
#                                      calculating how much counter value
#                                      has increased in average in one
#                                      second between the last value
#                                      and new value. The result is multiplied
#                                      by the factor given.
#
#          db_column   - name of the database table column to evaluate
#                        with this position
#
#          xpos        - x position in pixels of the top left corner of the 
#                        label text or center of the state circle starting 
#                        from the left of the image
#         
#          ypos        - y position in pixels of the top left corner of the 
#                        label text or center of the state circle starting 
#                        from the top of the image
#
#          subtype     - type to output
#                          VAL - current value or state circle
# 
#                          MIN - minimum value for the current period  
#                                (not valid for the STATE type)
#           
#                          MAX - minimum value for the current period 
#                                (not valid for the STATE type)
#
#                          AVG - average value for the current period  
#                                (average ON percent for the STATE type)
#
#          <type specific data> - additional parameters depending on the
#                        position type:
#
#                        For NORMAL and COUNTER types:
#
#                          Syntax:   factor:lowcolor:highcolor:lowvalue:highvalue:unit
#                                    (for COUNTER type add :cnttype[:maxvalue] after unit)
# 
#                          factor  - the values in the database column will
#                                    be multiplied with this factor before
#                                    evaluating
#
#                          lowcolor - color that will be used to write this data label,
#                                    when the value is less than or equal to the lowvalue
#                                    parameter. Color value may be a RGB value given in the
#                                    hexadecimal format (example: #E0E0E0) or as a JpGraph 
#                                    predefined color name
#                                    (http://jpgraph.net/download/manuals/chunkhtml/apd.html)
#
#                          highcolor - color that will be used to write this data label when
#                                    the value is greater than or equal to the highvalue
#                                    parameter. See lowcolor for the color format.
#
#                          lowvalue - Value when the label color reaches the lowcolor.
#                                    Values between lowvalue to highvalue will be 
#                                    drawn using a color between lowcolor and highcolor.
#
#                          highvalue - Value when the label color reaches the highcolor.
#
#                          unit    - Unit label for the position (eg. kW)
#
#                        Additionally for COUNTER type:
#
#                          cnttype - type of the counter value
#                                      0 - when the counter value has not changed
#                                          since last value, the value drawn is
#                                          zero
#                                      1 - when the counter value has not changed
#                                          since last value, consider this measurement
#                                          non existing. The next change in the counter
#                                          will result as average line over the period
#                                          the value stayed unchanged
#                                      2 - cumulative counter type. Outputs a daily 
#                                          cumulative counter increment.                                                                                    
#
#                          maxvalue - Maximum value for counter (optional)
#
#                        For STATE type:
#                          Syntax:   color:size:statement
#                          
#                          color   - color that will be used to draw the active
#                                    state circle in the image. See lowcolor for
#                                    the color format.
#
#                          size    - size in pixels for the circle
#
#                          statement - this statement will be evaluated
#                                    for the database value (marked as 
#                                    %VALUE% in the statement). If the 
#                                    statement is true for a value at a time
#                                    the state circle will be drawn to the
#                                    image.
#
# Examples:
#
#     @POSITION = NORMAL:floor_out:552:200:VAL:1.0:blue:red:19.0:32.0:C
#
#         A data series will be read from database column floor_out,
#         not scaled (same as multiplied by 1.0) and the data label
#         will be written in color between blue and red when the
#         value is between 19.0 and 32.0. The label text is drawn
#         in (x,y) position (552,200) in the image. The unit label
#         is "C".
#
#     @POSITION = STATE:statevalue:136:157:VAL:yellowgreen:20:(%VALUE% & 16) != 0
#
#         A state circle will be drawn in yellowish green indicating
#         whether the database column walue "statevalue" has bit 4 set
#         (and with value 16 results to a non zero value). The diamater of
#         the circle is 20 pixels. The center of the circle is in
#         in (x,y) position in the image (136,157).
#
@POSITION = NORMAL:dummy:50:50:VAL:1.0:blue:red:-20.0:20.0:C
                         
# Additional label configuration
#
# Additional optional text labels can be added to the image using
# LABEL list directives. (optional)
# 
# Syntax:   @LABEL = xpos:ypos:color:label text
#                                
@LABEL = 0:50:black:Outdoor
